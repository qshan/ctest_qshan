#good doc #https://scons.org/doc/production/HTML/scons-user.html#app-functions

#Library('',[])
#Library('TestUartSharedLib', ['../src_shared/test_uart_shared.c'])
#Library('TestUartSharedLib', ['../src_shared/test_uart_shared.c'] ,CPPPATH=['../include'])

#Program('',[])
#Program('',[])

#Program('test_uart' ,['../src/test_uart.c' ,CPPPATH=['../src' ,'../scr_shared' ,'../include'] ,['../src/say_hello_uart.c'] ,LIBS=['Test_uartSharedLib'] ,LIBPATH=['.'])
#Program('test_uart' ,['../src/test_uart.c' ,'../src/say_hello_uart.c'] ,CPPPATH=['../include'] ,LIBS=['Test_uartSharedLib'] ,LIBPATH=['.'])
#Program('test_uart' ,['../src/test_uart.c' ,'../src/say_hello_uart.c'] ,CPPPATH=['../include'] ,LIBS=['Test_uartSharedLib'] ,LIBPATH=['.'])

#SConstruct

#env = Environment(CC='gcc' ,CCFLAGS=' -O2 -Wall -g' ,CPPDEFINES=['MyDefine02'])
#
#env = Environment(CC='gcc')
#env = Environment(CXX='g++')
env = Environment(CC='clang')
env = Environment(CXX='clang++')
#
#env.Append(CCFLAGS=' -Wall -g')
env.Append(CCFLAGS=' -O2 -Wall -g')
#
env.Replace(CC='clang')
env.Replace(CXX='clang++')
#
env.Prepend(CPPDEFINES=['MyFirstDefine00'])
env.Append(CPPDEFINES=['MyDefine02'])
env.Append(MyVariableAdded01=['MyVariableAdded01'])
print("MyVariableAdded01 = %s" % env['MyVariableAdded01'])
#
opt = env.Clone(CCFLAGS=[' -O2'])
dbg = env.Clone(CCFLAGS=[' -Wall -g'])
#
#o = opt.Object('test_uart-o' ,['foo.c'])
#opt.Program(o)
##
#d = dbg.Object('test_uart-d' ,['foo.c'])
#dbg.Program(d)

Export ('env')
#Export ("opt", "dbg")
#Export ('opt dbg')
Export ('opt', 'dbg')
#Export ('dbg')

#check the env setting here
print("[env.CC]       is  %s" % env['CC'])
print("[env.CXX]      is  %s" % env['CXX'])
print("[env.CCFLAGS]  is  %s" % env['CCFLAGS'])

objs  = []
header_file_path  = []

#            , variant_dir='build_sc'

#TODO#
#test_main
objs.append( SConscript(['./test/SConscript']           , exports='env')  )
#libs_shared
objs.append( SConscript(['./libs_shared/shared/SConscript']    , exports='env')  )
#libs
objs.append( SConscript(['./libs/uart/SConscript'] , exports='env')  )
objs.append( SConscript(['./libs/file_log/SConscript'] , exports='env')  )
objs.append( SConscript(['./libs/time_stamp_log/SConscript'] , exports='env')  )
objs.append( SConscript(['./libs/say_hello/SConscript'] , exports='env')  )
#objs.append( SConscript(['./libs/practice/SConscript']  , exports='env')  )

#env.Program('test_uart' , objs)
#env.Program('test_uart' ,objs ,CPPPATH=['./include' ,'./libs/shared/header' ,'./libs/say_hello/header' ,'./libs/practice/header'])
env.Program('test_uart'
            ,objs
            ,CPPPATH=[
#                        './libs/shared/header'
#                       ,'./test/header'
                      ])

#                      , './libs/uart/header'
#                      , './libs/say_hello/header'
#            ,'./libs/practice/header'
